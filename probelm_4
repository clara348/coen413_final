//////////////////////// INTERFACE /////////////////////////////////////////////

interface ahb_if (input bit HCLK);
   bit [20:0] HADDR;
   bit 	      HWRITE;
   bit [7:0]  HWDATA;
   bit [1:0]  HTRANS;
   logic [7:0] HRDATA;
      
   modport slave (input HCLK, HADDR, HWRITE, HWDATA, HTRANS, output HRDATA);

   modport master (output HCLK, HADDR, HWRITE, HWDATA, HTRANS, input HRDATA);
   
 endinterface
 
 
 ///////////////////// PACKAGE //////////////////////////////////
package automatic my_package;
   localparam HADDR_WIDTH = 21;
   typedef enum logic [1:0] {IDLE=2'b00, NONSEQ=2'b10} htrans_t;
   
class Transaction;
   rand bit [HADDR_WIDTH-1:0] HADDR;
   rand bit HWRITE;
   rand bit [7:0] HWDATA;
   rand htrans_t HTRANS;
   rand bit reset;

   constraint HADDR_c {HADDR dist {[0:4]:/40, [5:(2**HADDR_WIDTH)-6]:/20, [(2**HADDR_WIDTH)-5:(2**HADDR_WIDTH)-1]:/40};}
   constraint reset_c {reset dist {0:=90, 1:=10};}

   function void print_trans;
      $display("Transaction is HADDR=%0h, HWRITE=%0b, HWDATA=%0h, HTRANS=%0h, reset=%0b", HADDR, HWRITE, HWDATA, HTRANS, reset);
   endfunction //
   
endclass // Transaction
endpackage


////////////////SRAM_CONTROL///////////////////////////////////////
// Purpose: DUT for Chap_6_Randomization/homework_solution
// Author: Greg Tumbush
//
// REVISION HISTORY:
// $Log: sram_control.sv,v $
// Revision 1.1  2011/05/29 19:10:04  tumbush.tumbush
// Check into cloud repository
//
// Revision 1.1  2011/03/20 19:09:52  Greg
// Initial check in
//
//////////////////////////////////////////////////////////////
`default_nettype none
  module sram_control(ahb_if ahb_bus, sram_if sram_bus, input wire reset);
  
  // Reg to assign data out values to
  reg [7:0] DQ_reg;
  
  parameter IDLE = 2'b00,
           WRITE = 2'b01,
           READ = 2'b10;
           
  parameter HTRANS_IDLE = 2'b00;
  parameter HTRANS_NONSEQ = 2'b10;        
  
  reg [1:0] current_state, next_state;
  
  assign sram_bus.DQ = DQ_reg;
  
   always @* begin
     // Defaults
     DQ_reg   = 8'hZ;
     sram_bus.CE_b = 1'b1; 
     sram_bus.WE_b = 1'b1; 
     sram_bus.OE_b = 1'b1;
     ahb_bus.HRDATA = 8'b0;
     case (current_state)
       IDLE: begin
         if (ahb_bus.HTRANS == HTRANS_NONSEQ) begin
           if (ahb_bus.HWRITE)
             next_state = WRITE;
           else
             next_state = READ;
         end
       else
         next_state = IDLE;
       end
       // Do the write on the SRAM
       WRITE: begin
         sram_bus.CE_b = 1'b0; 
         sram_bus.WE_b = 1'b0;
         DQ_reg = ahb_bus.HWDATA;
         if (ahb_bus.HTRANS == HTRANS_NONSEQ) begin
           if (ahb_bus.HWRITE)
             next_state = WRITE;
           else
             next_state = READ;
         end
       else
         next_state = IDLE;
       end
       // Do the read on the SRAM
       READ: begin
         sram_bus.CE_b = 1'b0; 
         sram_bus.OE_b = 1'b0;
         ahb_bus.HRDATA = sram_bus.DQ;
         if (ahb_bus.HTRANS == HTRANS_NONSEQ) begin
           if (ahb_bus.HWRITE)
             next_state = WRITE;
           else
             next_state = READ;
         end
       else
         next_state = IDLE;
       end
       default: next_state = IDLE;
     endcase
   end // always
   
   // Current_state = next state on the active edge of the clock
   always @(posedge ahb_bus.HCLK or posedge reset) begin
     if (reset)
       current_state <= IDLE;
     else
       current_state <= next_state;
   end
   
  // Delay the address by 1 clock cycle
  always @(posedge ahb_bus.HCLK or posedge reset) begin
     if (reset)
       sram_bus.A <= 21'b0;
     else
       sram_bus.A <= ahb_bus.HADDR;
  end
  
  //synopsys translate_off
  reg [95:0] ASCII_current_state;
  always @(current_state) begin
    case(current_state)
      IDLE: ASCII_current_state = "IDLE";
      WRITE: ASCII_current_state = "WRITE";
      READ: ASCII_current_state = "READ";
    endcase
  end 
  //synopsys translate_on
  
endmodule


//////////////////////////SRAM INTERFACE ////////////////////////////////////////////
interface sram_if;
   bit [20:0] A;
   bit CE_b;
   bit WE_b;
   bit OE_b;
   wire [7:0] DQ;
      
   modport master (output A, CE_b, WE_b, OE_b, inout DQ);

 endinterface

 /////////////// SV RAND CHECK ////////////////////////////
`define SV_RAND_CHECK(r) \
   do begin \
     if (!(r)) begin \
       $display("%s:%0d: Randomization failed \"%s\"", \
                `__FILE__, `__LINE__, r); \
       $finish; \
     end \
   end while (0)
   
   
   
////////////////// TEST ///////////////////////////////////////

`include "SV_RAND_CHECK.sv"
program automatic test(output logic reset, ahb_if ahb_bus);

   import  my_package::*;

   // # of memory locations to test
   localparam  TESTS = 10;

   // Declare an array of handles to Transaction objects
   Transaction Transaction_array[TESTS*3+2];

initial begin

  // Create TESTS back to back writes
  for (int i=0;i<TESTS;i++) begin
      Transaction_array[i] = new();
     `SV_RAND_CHECK(Transaction_array[i].randomize() with {(HTRANS == NONSEQ); (HWRITE == 1); (reset == 0); (HADDR inside {[0:4]});});
      Transaction_array[i].print_trans;
  end

  // Idle the bus to switch to reads
      Transaction_array[TESTS] = new();
     `SV_RAND_CHECK(Transaction_array[TESTS].randomize() with {(HTRANS == IDLE); (HWRITE == 1); (reset == 0); (HADDR inside {[0:4]});});
      Transaction_array[TESTS].print_trans;
   
  // Create TESTS back to back reads
  for (int i=TESTS+1;i<TESTS*2+1;i++) begin
      Transaction_array[i] = new();
     `SV_RAND_CHECK(Transaction_array[i].randomize() with {(HTRANS == NONSEQ); (HWRITE == 0); (reset == 0); (HADDR inside {[0:4]});});
      Transaction_array[i].print_trans;
  end

     // Idle the bus to switch to random
      Transaction_array[TESTS*2+1] = new();
     `SV_RAND_CHECK(Transaction_array[TESTS*2+1].randomize() with {(HTRANS == IDLE); (HWRITE == 1); (reset == 0); (HADDR inside {[0:4]});});
      Transaction_array[TESTS*2+1].print_trans;

 
   // Create TESTS new objects and store the
   // handles to the objects in the Transaction_array
   for (int i=TESTS*2+2;i<TESTS*3+2;i++) begin
      Transaction_array[i] = new();
      `SV_RAND_CHECK(Transaction_array[i].randomize());
      Transaction_array[i].print_trans;
   end   
   
   // At the positive edge of each clock, send out transaction i.
   // If the previous transaction was a write HWDATA = transaction[i-1].HWDATA
      for (int i=0;i<TESTS*3+2;i++) begin
	 @(posedge ahb_bus.HCLK);
	 ahb_bus.HADDR <= Transaction_array[i].HADDR;
         ahb_bus.HWRITE <= Transaction_array[i].HWRITE;
	 ahb_bus.HTRANS <= Transaction_array[i].HTRANS;
	 if (i != 0) begin
           if ((Transaction_array[i-1].HTRANS == NONSEQ) && Transaction_array[i-1].HWRITE)	 
              ahb_bus.HWDATA <= Transaction_array[i-1].HWDATA;
	 end
	 reset <= Transaction_array[i].reset;
      end
      $finish;
   end // initial begin   
endprogram


//////////////////// TOP - TESTBENCH ////////////////////////////////////////////
`default_nettype none
`include "ahb_if.sv"
`include "sram_if.sv"
module top;

   bit clk;
   bit reset;
   
   // The ahb interface
   ahb_if ahb_bus(clk);

   // The sram interface
   sram_if sram_bus();
   
   // The test
   test test(.reset(reset), .ahb_bus(ahb_bus.master));

   // The SRAM model
   async async_sram (
		     .A(sram_bus.A),
		     .CE_b(sram_bus.CE_b),
		     .WE_b(sram_bus.WE_b), 
		     .OE_b(sram_bus.OE_b),
		     .DQ(sram_bus.DQ)
		     );

// The DUT
   sram_control sram_control(
			     .ahb_bus(ahb_bus.slave), 
			     .sram_bus(sram_bus.master), 
			     .reset(reset)
     );

   // Create a clock
   initial begin
      clk = 1'b0;
      forever #50ns clk=!clk;
   end
endmodule // test



